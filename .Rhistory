print("hello ai era")
print("hello ai era")
getwd
getwd()
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE) # applies to all chunks
mani97 <- function(data){
newdata <- data %>%
rename(
number = c(1),
difference = c(2),
university = c(3),
city = c(4),
department = c(5),
type = c(6),
quota = c(7),
difference_quota = c(8),
accepted_number = c(9),
lowest_score = c(10),
highest_score = c(11),
lowest_ranking = c(12),
difference_ranking = c(13)
)  %>% select(-number, -difference, -difference_quota, -difference_ranking) %>% slice_head(n=nrow(data)-9)
return(newdata)
}
mani86 <- function(data){
newdata <- data %>%
rename(
number = c(1),
difference = c(2),
university = c(3),
city = c(4),
department = c(5),
type = c(6),
quota = c(7),
difference_quota = c(8),
accepted_number = c(9),
lowest_score = c(10),
highest_score = c(11),
lowest_ranking = c(12)
)  %>% select(-number, -difference, -difference_quota) %>% slice_head(n=nrow(data)-9)
return(newdata)
}
library(tidyverse)
library(lubridate)
library(tinytex)
library(readxl) # read_excel
library(tidyr)
library(httr) # GET
library(reshape2)
library(ggforce) # circle data points
library(xaringan)
url<-'https://github.com/pjournal/boun01g-dol-r/blob/gh-pages/uni_exam_project/uni_exam.xlsx?raw=true'
GET(url, write_disk(tf <- tempfile(fileext = ".xlsx")))
raw_df20 <- read_excel(tf, sheet="20", skip=21)
raw_df19 <- read_excel(tf, sheet="19", skip=21)
raw_df18 <- read_excel(tf, sheet="18", skip=21)
raw_df17 <- read_excel(tf, sheet="17", skip=21)
raw_df16 <- read_excel(tf, sheet="16", skip=21)
file.remove(tf)
data2020 <- mani97(raw_df20)
data2020 <- mani97(raw_df20)
data2019 <- mani97(raw_df19)
data2018 <- mani86(raw_df18)
data2017 <- mani97(raw_df17)
data2016 <- mani97(raw_df16)
data2020 %>% summarise(exam20=n()) %>% mutate(data2019 %>% summarise(exam19=n())) %>% mutate(data2018 %>% summarise(exam18=n())) %>% mutate(data2017 %>% summarise(exam17=n())) %>% mutate(data2016 %>% summarise(exam16=n()))
data2018 %>% arrange(desc(lowest_score)) %>% glimpse()
score <- function(data){
data %>% group_by(university, department) %>% select(-type, -city) %>% arrange(desc(lowest_score)) %>% head(10) %>% mutate(department=replace(department, str_detect(department,"Tıp"), "Tıp")) %>% mutate(department=str_replace(department, "Burslu", "")) %>% mutate(department=str_replace(department, "İngilizce", "")) %>% mutate(department=str_replace(department, " \\([^()]{0,}\\)", "")) %>% mutate(department=str_replace(department, " \\([^()]{0,}\\)", "")) %>% ungroup()
}
dept <- function(data){
data %>% count(department) %>% arrange(desc(n))
}
uni <- function(data){
data %>% count(university) %>% arrange(desc(n))
}
top_uni <- full_join(uni(score(data2016)), uni(score(data2017)), by="university", suffix=c(".2016", ".2017")) %>% full_join(., uni(score(data2018)), by="university", suffix=c(".2016", ".2018"))
top_uni <- full_join(top_uni, uni(score(data2019)), by="university", suffix=c(".2018", ".2019"))
top_uni <- full_join(top_uni, uni(score(data2020)), by="university", suffix=c(".2019", ".2020"))
names(top_uni)[names(top_uni)=='n.2016']<-'year2016'
names(top_uni)[names(top_uni)=='n.2017']<-'year2017'
names(top_uni)[names(top_uni)=='n.2018']<-'year2018'
names(top_uni)[names(top_uni)=='n.2019']<-'year2019'
names(top_uni)[names(top_uni)=='n']<-'year2020'
top_dept <- full_join(dept(score(data2016)), dept(score(data2017)), by="department", suffix=c(".2016", ".2017")) %>% full_join(., dept(score(data2018)), by="department", suffix=c(".2016", ".2018"))
top_dept <- full_join(top_dept, dept(score(data2019)), by="department", suffix=c(".2018", ".2019"))
top_dept <- full_join(top_dept, dept(score(data2020)), by="department", suffix=c(".2019", ".2020"))
names(top_dept)[names(top_dept)=='n.2016']<-'year2016'
names(top_dept)[names(top_dept)=='n.2017']<-'year2017'
names(top_dept)[names(top_dept)=='n.2018']<-'year2018'
names(top_dept)[names(top_dept)=='n.2019']<-'year2019'
names(top_dept)[names(top_dept)=='n']<-'year2020'
top_uni <- top_uni %>% replace_na(list(year2016 = 0, year2017 = 0, year2018 = 0, year2019 = 0, year2020 = 0))
top_dept <- top_dept %>% replace_na(list(year2016 = 0, year2017 = 0, year2018 = 0, year2019 = 0, year2020 = 0))
top_uni.long <- melt(top_uni)
plot_uni <- ggplot(top_uni.long, aes(x=value, y=university, col=variable)) + geom_jitter(width=0.1, height=0.1)  + stat_smooth() + ggtitle("Top Universities") + xlab("Number of Participants") + ylab("Universities") + theme(plot.caption=element_text(hjust = 0.5))+theme_bw()
plot_uni
top_dept.long <- melt(top_dept)
plot_dept <- ggplot(top_dept.long, aes(x=value, y=department, col=variable)) + geom_jitter(width=0.1, height=0.1) + stat_smooth() + ggtitle("Top Departments") + xlab("Number of Participants") + ylab("Departments") + theme(plot.caption=element_text(hjust = 0.5))
plot_dept+theme_bw()
total_data <- full_join(data2016,data2017,by=c('university','department','city','type'),suffix = c('.2016','.2017'))%>%
full_join(. ,data2018,by=c('university','department','city','type'))%>%
full_join(. ,data2019,by=c('university','department','city','type'),suffix = c('.2018','.2019'))%>%
full_join(. ,data2020,by=c('university','department','city','type'))
names(total_data)[names(total_data)=='type']<-'type.2020'
names(total_data)[names(total_data)=='quota']<-'quota.2020'
names(total_data)[names(total_data)=='accepted_number']<-'accepted_number.2020'
names(total_data)[names(total_data)=='lowest_score']<-'lowest_score.2020'
names(total_data)[names(total_data)=='highest_score']<-'highest_score.2020'
names(total_data)[names(total_data)=='lowest_ranking']<-'lowest_ranking.2020'
bin_tr<- total_data%>%
filter(lowest_ranking.2020<1000)
tab2<-table(bin_tr$city,bin_tr$type.2020)
knitr::kable(tab2,caption = "Table.1. City  Distribution of the First Thousand Students")
tab<-table(bin_tr$university,bin_tr$type.2020)
knitr::kable(tab,caption = "Table.2. University Distribution of the First Thousand Students ")
besbin_tr<- total_data%>%
filter(lowest_ranking.2020<5000)
tab3<-table(besbin_tr$city,besbin_tr$type.2020)
knitr::kable(tab3,caption = "Table.3. City Distribution of the First Five Thousand Students")
tab4<-table(besbin_tr$university,besbin_tr$type.2020)
knitr::kable(tab4,caption = "Table.4. University Distribution of the First Five Thousand Students")
besbin_tr%>%
ggplot(aes(x = lowest_ranking.2020, fill = city)) +
geom_density(alpha = 0.3)+theme_bw() + labs(x='Lowest Ranking in 2020', y= 'Density', fill='City' )
all_years_data<-bind_rows(mutate(data2016,year=2016),
mutate(data2017,year=2017),
mutate(data2018,year=2018),
mutate(data2019,year=2019),
mutate(data2020,year=2020))
dep<-all_years_data%>%
group_by(year,department)%>%
summarise(department_quota=sum(quota))%>%
arrange(desc(department_quota))%>%head(20)
knitr::kable(dep,caption = "Table.5. Department Quotas in Recent Years")
city_tab<- all_years_data%>%
group_by(year,city)%>%
summarise(city_quota=sum(quota))%>%
arrange(desc(city_quota))%>%head(20)
knitr::kable(city_tab,caption = "Table.6. City Quotas in Recent Years")
uni<- all_years_data%>%
group_by(year,university)%>%
summarise(university_quota=sum(quota))%>%
arrange(desc(university_quota))%>%head(20)
knitr::kable(uni,caption = "Table.7. University Quotas in Recent Years")
View(all_years_data)
100 * (sum(data2020$accepted_number)/sum(data2020$quota)
=a
data2020
akk <- 100 * (sum(data2020$accepted_number)/sum(data2020$quota)
)
?round
round(100 * (sum(data2020$accepted_number)/sum(data2020$quota) ), digits=2)
100 * (sum(data2019$accepted_number)/sum(data2019$quota) )
total_data <- full_join(data2016,data2017,by=c('university','department','city','type'),suffix = c('.2016','.2017'))%>%
full_join(. ,data2018,by=c('university','department','city','type'))%>%
full_join(. ,data2019,by=c('university','department','city','type'),suffix = c('.2018','.2019'))%>%
full_join(. ,data2020,by=c('university','department','city','type'))
names(total_data)[names(total_data)=='type']<-'type.2020'
names(total_data)[names(total_data)=='quota']<-'quota.2020'
names(total_data)[names(total_data)=='accepted_number']<-'accepted_number.2020'
names(total_data)[names(total_data)=='lowest_score']<-'lowest_score.2020'
names(total_data)[names(total_data)=='highest_score']<-'highest_score.2020'
names(total_data)[names(total_data)=='lowest_ranking']<-'lowest_ranking.2020'
setwd("~/Documents/GitHub")
setwd("~/Documents/GitHub/boun01-yusufisik1")
set.seed(503)
library(tidyverse)
diamonds_test <- diamonds %>% mutate(diamond_id = row_number()) %>%
group_by(cut, color, clarity) %>% sample_frac(0.2) %>% ungroup()
diamonds_train <- anti_join(diamonds %>% mutate(diamond_id = row_number()),
diamonds_test, by = "diamond_id")
diamonds_train
View(diamonds_test)
View(diamonds_train)
set.seed(503)
library(tidyverse)
diamonds_test <- diamonds %>% mutate(diamond_id = row_number()) %>%
group_by(cut, color, clarity) %>% sample_frac(0.2) %>% ungroup()
diamonds_train <- anti_join(diamonds %>% mutate(diamond_id = row_number()),
diamonds_test, by = "diamond_id")
diamonds_train
diamonds_test
?diamonds
plotdata <- diamonds_train %>% select(-x,-y, -z, -diamond_id)
ggplot(plotdata) + geom_point(aes(x=carat, y=price)) + geom_smooth(method = "lm", aes(x=carat, y=price), se=F)
ggplot(plotdata) + geom_point(aes(x=carat, y=price)) + geom_smooth(method = "lm", aes(x=carat, y=price), se=T)
ggplot(plotdata) + geom_point(aes(x=cut, y=price)) + geom_smooth(method = "lm", aes(x=cut, y=price), se=T)
ggplot(plotdata) + geom_point(aes(x=carat, y=price), color=cut) + geom_smooth(method = "lm", aes(x=carat, y=price), se=T)
ggplot(plotdata) + geom_point(aes(x=carat, y=price), color=cut)
ggplot(plotdata) + geom_point(aes(x=carat, y=price), color='cut')
ggplot(plotdata) + geom_point(aes(x=carat, y=price), fill=cut)
ggplot(plotdata) + geom_point(aes(x=carat, y=price))
ggplot(plotdata, color=cut) + geom_point(aes(x=carat, y=price))
ggplot(plotdata, aes(x=carat, y=price),color=cut) + geom_point()
ggplot(plotdata, aes(x=carat, y=price),fill=cut) + geom_point()
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(fill=I("#F79420"), color=I("black"), shape=21) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99)) ) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)) ) +
ggtitle("Diamonds: Price vs. Carat")
glimpse(diamonds)
is.na(diamonds)
diamonds %>% summarise(is.na)
diamonds %>% summarise(is.na())
?is.na.data.frame
diamonds %>% summarise_all(funs(sum(is.na(.))))
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(fill=I("#F79420"), color=I("black"), shape=21) +
geom_smooth(method = 'lm')
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99)) ) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)) ) +
ggtitle("Diamonds: Price vs. Carat")
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(fill=I("#F79420"), color=I("black"), shape=21) +
stat_smooth(method = 'lm')
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99)) ) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)) ) +
ggtitle("Diamonds: Price vs. Carat")
ggplot(aes(x=carat, y=price), data=diamonds) +
geom_point(fill=I("#F79420"), color=I("black"), shape=21) +
stat_smooth(method="lm") +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99)) ) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)) ) +
ggtitle("Diamonds: Price vs. Carat")
carat_vs_price <- lm(carat ~ price, data=diamonds_train)
summary(carat_vs_price)
library(vtreat)
library(GGally)
library(gridExtra)
library(tidyverse)
set.seed(503)
diamonds_test <- diamonds %>% mutate(diamond_id = row_number()) %>%
group_by(cut, color, clarity) %>% sample_frac(0.2) %>% ungroup()
diamonds_train <- anti_join(diamonds %>% mutate(diamond_id = row_number()),
diamonds_test, by = "diamond_id")
diamonds_train
library(vtreat)
library(GGally)
library(gridExtra)
library(tidyverse)
dim(diamonds_train)
library(vtreat)
library(GGally)
library(gridExtra)
library(tidyverse)
set.seed(503)
diamonds_test <- diamonds %>% mutate(diamond_id = row_number()) %>%
group_by(cut, color, clarity) %>% sample_frac(0.2) %>% ungroup()
diamonds_train <- anti_join(diamonds %>% mutate(diamond_id = row_number()),
diamonds_test, by = "diamond_id")
glimpse(diamonds_train)
glimpse(diamonds_train)
summary(diamonds_train)
glimpse(diamonds_train)
summary(diamonds_train)
diamonds_train %>% summarise_all(table(sum(is.na(.)))) # is there any na values?
glimpse(diamonds_train)
summary(diamonds_train)
diamonds_train %>% summarise_all(funs(sum(is.na(.)))) # is there any na values?
glimpse(diamonds_train)
summary(diamonds_train)
diamonds_train %>% summarise_all(funs(sum(is.na(.)))) # is there any na values?
?c()
?vector
?ggpairs
ggpairs(diamonds_train, columns = 1:ncol(data)-1,  aes(alpha =0.5))
ggpairs(diamonds_train, columns = 1:ncol(diamonds_train)-1,  aes(alpha =0.5))
ggpairs(diamonds_train, columns = 1:10,  aes(alpha =0.5))
ggpairs(diamonds_train, columns = c(1,5,6,7),  aes(alpha =0.5))
ggpairs(diamonds_train, columns = c(2,3,4,7),  aes(alpha =0.5),title = 'Qualitative Variables vs Price')
ggpairs(diamonds_train, columns = c(2,3,4,7,8,9,10),  aes(alpha =0.5),title = 'Qualitative Variables vs Price')
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_log10()
View(p1)
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_log10()
p1
p2 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_log10()
p2
?scale
?scale_x_log10
p3 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p3
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p2 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt() #to see how it doing with square root.
p3 <- ggplot(diamonds_train, aes(x = carat, y = price, color = clearity)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p4 <- ggplot(diamonds_train, aes(x = x, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p5 <- ggplot(diamonds_train, aes(x = y, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p6 <- ggplot(diamonds_train, aes(x = z, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
grid.arrange(p1, p2, p3, p4, p5, p6, nrow= 3, ncol = 2)
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p2 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt() #to see how it doing with square root.
p3 <- ggplot(diamonds_train, aes(x = carat, y = price, color = clarity)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p4 <- ggplot(diamonds_train, aes(x = x, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p5 <- ggplot(diamonds_train, aes(x = y, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p6 <- ggplot(diamonds_train, aes(x = z, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
grid.arrange(p1, p2, p3, p4, p5, p6, nrow= 3, ncol = 2)
View(p1)
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p2 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt() #to see how it doing with square root.
p3 <- ggplot(diamonds_train, aes(x = carat, y = price, color = clarity)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p4 <- ggplot(diamonds_train, aes(x = x, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p5 <- ggplot(diamonds_train, aes(x = y, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p6 <- ggplot(diamonds_train, aes(x = z, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
grid.arrange(p1, p2, p3, p4, p5, p6, nrow= 3, ncol = 2)
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p1
p1 <- ggplot(diamonds_train, aes(x = carat, y = price)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p1
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color=cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p1
carat_vs_price <- lm(price ~ carat, data=diamonds_train)
summary(carat_vs_price)
na.omit
?na.omit
carat_vs_price <- lm(price ~ x+y+z+carat, data=diamonds_train)
summary(carat_vs_price)
carat_vs_price <- lm(price ~ x+y+carat, data=diamonds_train)
summary(carat_vs_price)
carat_vs_price <- lm(price ~ ., data=diamonds_train[1:10])
summary(carat_vs_price)
?glm
model2 <- lm(I(log(price)) ~ ., data = diamonds)
summary(model2)
model2 <- lm(I(log(price)) ~ ., data = diamonds_train)
summary(model2)
model2 <- lm(I(log(price)) ~ ., data = diamonds_train[1:10])
summary(model2)
?predict
model1 <- lm(price ~ ., data=diamonds_train[1:10])
summary(model1)
train_pred= predict(model1)
test_pred=  predict(model1,)
rmse(diamonds_test$price, test_pred)
train_pred= predict(model1)
test_pred=  predict(model1)
rmse(diamonds_test$price, test_pred)
?rmse
library(modelr)
train_pred= predict(model1)
test_pred=  predict(model1)
rmse(diamonds_test$price, test_pred)
library(modelr)
train_pred= predict(model1)
test_pred=  predict(model1, new=diamonds_test)
rmse(diamonds_test$price, test_pred)
library(modelr)
train_pred= predict(model1)
test_pred=  predict(model1, new=diamonds_test)
rmse( test_pred, diamonds_test$price)
library(modelr)
train_pred= predict(model1)
test_pred=  predict(model1, new=diamonds_test)
rmse( model=test_pred, data=diamonds_test$price)
diamonds_test[-price]
diamonds_test[-'price']
diamonds_test %>% select(-price,-diamond_id)
library(modelr)
new_testdf <- diamonds_test %>% select(-price,-diamond_id)
train_pred= predict(model1)
test_pred=  predict(model1, new=new_testdf, interval = "prediction", level=.95)
test_pred
library(modelr)
new_testdf <- diamonds_test %>% select(-price,-diamond_id)
train_pred= predict(model1)
test_pred=  predict(model1, new=new_testdf)
test_pred
library(modelr)
new_testdf <- diamonds_test %>% select(-price,-diamond_id)
train_pred= predict(model1)
test_pred=  predict(model1, new=new_testdf)
rmse(diamonds_test$price,test_pred)
new_testdf <- diamonds_test %>% select(-price,-diamond_id)
train_pred= predict(model1)
test_pred=  predict(model1, new=new_testdf)
rmse(diamonds_test$price,test_pred)
?lm()
model2 <- lm(I(log(price)) ~ ., data = diamonds_train[1:10])
summary(model2)
diamonds_test2 <- diamonds_test %>% select(-price,-diamond_id)
train_pred= predict(model2)
test_pred=  predict(model2, new=diamonds_test2)
test_pred
library(vtreat)
library(GGally)
library(gridExtra)
library(tidyverse)
set.seed(503)
diamonds_test <- diamonds %>% mutate(diamond_id = row_number()) %>%
group_by(cut, color, clarity) %>% sample_frac(0.2) %>% ungroup()
diamonds_train <- anti_join(diamonds %>% mutate(diamond_id = row_number()),
diamonds_test, by = "diamond_id")
glimpse(diamonds_train)
summary(diamonds_train)
diamonds_train %>% summarise_all(funs(sum(is.na(.)))) # is there any na values?
ggpairs(diamonds_train, columns = c(1,5,6,7),  aes(alpha =0.5), title = 'Quantitative Variables vs Price')
ggpairs(diamonds_train, columns = c(2,3,4,7,8,9,10),  aes(alpha =0.5),title = 'Qualitative Variables vs Price')
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color = cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p2 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt() #to see how it doing with square root.
p3 <- ggplot(diamonds_train, aes(x = carat, y = price, color = clarity)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p4 <- ggplot(diamonds_train, aes(x = x, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p5 <- ggplot(diamonds_train, aes(x = y, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p6 <- ggplot(diamonds_train, aes(x = z, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
grid.arrange(p1, p2, p3, p4, p5, p6, nrow= 3, ncol = 2)
p1 <- ggplot(diamonds_train, aes(x = carat, y = price, color=cut)) +
geom_point(alpha = 0.3) + scale_y_sqrt()
p1
p2 <- ggplot(diamonds_train, aes(x = carat, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt() #to see how it doing with square root.
p2
p3 <- ggplot(diamonds_train, aes(x = carat, y = price, color = clarity)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p3
p4 <- ggplot(diamonds_train, aes(x = x, y = price, color = color)) + geom_point(alpha = 0.3) + scale_y_sqrt()
p4
model1 <- lm(price ~ ., data=diamonds_train[1:10])
summary(model1)
model2 <- lm(I(log(price)) ~ ., data = diamonds_train[1:10])
summary(model2)
new_testdf <- diamonds_test %>% select(-price,-diamond_id)
train_pred= predict(model1)
test_pred=  predict(model1, new=new_testdf)
